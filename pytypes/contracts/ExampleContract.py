from __future__ import annotations

import random 
from dataclasses import dataclass 
from typing import List, NewType, Optional, overload, Union
from typing_extensions import Literal

from woke.testing.contract import Contract, Library, TransactionObject, Address, Wei

from woke.testing.abi_to_type import RequestType
from enum import IntEnum

from pytypes.axelarnetwork.axelargmpsdksolidity.contracts.interfaces.IERC20 import IERC20
from pytypes.axelarnetwork.axelargmpsdksolidity.contracts.executables.AxelarExecutable import AxelarExecutable

from woke.testing.primitive_types import uint256


class ExampleContract(AxelarExecutable):
    _abi = {'constructor': {'inputs': [{'internalType': 'address', 'name': 'gateway', 'type': 'address'}], 'stateMutability': 'nonpayable', 'type': 'constructor'}, b'\xe6\xc4${': {'inputs': [], 'name': 'InvalidAddress', 'type': 'error'}, b'P\x0cD\xb4': {'inputs': [], 'name': 'NotApprovedByGateway', 'type': 'error'}, b'I\x16\x06X': {'inputs': [{'internalType': 'bytes32', 'name': 'commandId', 'type': 'bytes32'}, {'internalType': 'string', 'name': 'sourceChain', 'type': 'string'}, {'internalType': 'string', 'name': 'sourceAddress', 'type': 'string'}, {'internalType': 'bytes', 'name': 'payload', 'type': 'bytes'}], 'name': 'execute', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\x1a\x98\xb2\xe0': {'inputs': [{'internalType': 'bytes32', 'name': 'commandId', 'type': 'bytes32'}, {'internalType': 'string', 'name': 'sourceChain', 'type': 'string'}, {'internalType': 'string', 'name': 'sourceAddress', 'type': 'string'}, {'internalType': 'bytes', 'name': 'payload', 'type': 'bytes'}, {'internalType': 'string', 'name': 'tokenSymbol', 'type': 'string'}, {'internalType': 'uint256', 'name': 'amount', 'type': 'uint256'}], 'name': 'executeWithToken', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\x11a\x91\xb6': {'inputs': [], 'name': 'gateway', 'outputs': [{'internalType': 'contract IAxelarGateway', 'name': '', 'type': 'address'}], 'stateMutability': 'view', 'type': 'function'}, b'2\x97\x07\x10': {'inputs': [], 'name': 'lastMessage', 'outputs': [{'internalType': 'string', 'name': 'sourceChain', 'type': 'string'}, {'internalType': 'string', 'name': 'sourceAddress', 'type': 'string'}, {'internalType': 'bytes', 'name': 'payload', 'type': 'bytes'}, {'internalType': 'string', 'name': 'tokenSymbol', 'type': 'string'}, {'internalType': 'uint256', 'name': 'tokenAmount', 'type': 'uint256'}], 'stateMutability': 'view', 'type': 'function'}, b'\x1e\rC\xb9': {'inputs': [{'internalType': 'string', 'name': 'destinationChain', 'type': 'string'}, {'internalType': 'string', 'name': 'destinationAddress', 'type': 'string'}, {'internalType': 'bytes', 'name': 'payload', 'type': 'bytes'}], 'name': 'send', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, b')\xae`k': {'inputs': [{'internalType': 'string', 'name': 'destinationChain', 'type': 'string'}, {'internalType': 'string', 'name': 'destinationAddress', 'type': 'string'}, {'internalType': 'bytes', 'name': 'payload', 'type': 'bytes'}, {'internalType': 'contract IERC20', 'name': 'token', 'type': 'address'}, {'internalType': 'string', 'name': 'symbol', 'type': 'string'}, {'internalType': 'uint256', 'name': 'amount', 'type': 'uint256'}], 'name': 'sendWithToken', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}}
    _bytecode = "60a060405234801561001057600080fd5b5060405161119938038061119983398101604081905261002f91610069565b806001600160a01b0381166100575760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b031660805250610099565b60006020828403121561007b57600080fd5b81516001600160a01b038116811461009257600080fd5b9392505050565b6080516110c36100d660003960008181606c015281816101430152818161022c015281816102bc0152818161039f015261069501526110c36000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063116191b6146100675780631a98b2e0146100ab5780631e0d43b9146100c057806329ae606b146100d357806332970710146100e657806349160658146100ff575b600080fd5b61008e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100be6100b9366004610b07565b610112565b005b6100be6100ce366004610be1565b610215565b6100be6100e1366004610c97565b6102a5565b6100ee610422565b6040516100a2959493929190610d9b565b6100be61010d366004610dfb565b610664565b60008585604051610124929190610e9f565b604051908190038120631876eed960e01b825291506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631876eed990610188908e908e908e908e908e9089908d908d908d90600401610ed8565b602060405180830381600087803b1580156101a257600080fd5b505af11580156101b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101da9190610f37565b6101f757604051631403112d60e21b815260040160405180910390fd5b6102088a8a8a8a8a8a8a8a8a61075b565b5050505050505050505050565b604051631c92115f60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631c92115f9061026b90899089908990899089908990600401610f60565b600060405180830381600087803b15801561028557600080fd5b505af1158015610299573d6000803e3d6000fd5b50505050505050505050565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820183905285169063095ea7b390604401602060405180830381600087803b15801561030f57600080fd5b505af1158015610323573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103479190610f37565b6103885760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b604482015260640160405180910390fd5b604051632d505c2160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b5417084906103e4908d908d908d908d908d908d908c908c908c90600401610fa9565b600060405180830381600087803b1580156103fe57600080fd5b505af1158015610412573d6000803e3d6000fd5b5050505050505050505050505050565b60008054819061043190611011565b80601f016020809104026020016040519081016040528092919081815260200182805461045d90611011565b80156104aa5780601f1061047f576101008083540402835291602001916104aa565b820191906000526020600020905b81548152906001019060200180831161048d57829003601f168201915b5050505050908060010180546104bf90611011565b80601f01602080910402602001604051908101604052809291908181526020018280546104eb90611011565b80156105385780601f1061050d57610100808354040283529160200191610538565b820191906000526020600020905b81548152906001019060200180831161051b57829003601f168201915b50505050509080600201805461054d90611011565b80601f016020809104026020016040519081016040528092919081815260200182805461057990611011565b80156105c65780601f1061059b576101008083540402835291602001916105c6565b820191906000526020600020905b8154815290600101906020018083116105a957829003601f168201915b5050505050908060030180546105db90611011565b80601f016020809104026020016040519081016040528092919081815260200182805461060790611011565b80156106545780601f1061062957610100808354040283529160200191610654565b820191906000526020600020905b81548152906001019060200180831161063757829003601f168201915b5050505050908060040154905085565b60008282604051610676929190610e9f565b604051908190038120635f6970c360e01b825291506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635f6970c3906106d4908b908b908b908b908b90899060040161104c565b602060405180830381600087803b1580156106ee57600080fd5b505af1158015610702573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107269190610f37565b61074357604051631403112d60e21b815260040160405180910390fd5b6107518787878787876108d6565b5050505050505050565b6040518060a001604052808a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f8b0181900481028201810190925289815291810191908a908a9081908401838280828437600092019190915250505090825250604080516020601f890181900481028201810190925287815291810191908890889081908401838280828437600092019190915250505090825250604080516020601f8701819004810282018101909252858152918101919086908690819084018382808284376000920182905250938552505050602091820184905282518051919261086c92849290910190610a25565b5060208281015180516108859260018501920190610a25565b50604082015180516108a1916002840191602090910190610a25565b50606082015180516108bd916003840191602090910190610a25565b5060808201518160040155905050505050505050505050565b6040518060a0016040528087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f880181900481028201810190925286815291810191908790879081908401838280828437600092019190915250505090825250604080516020601f860181900481028201810190925284815291810191908590859081908401838280828437600092018290525093855250506040805160208181018352848252808601919091529301829052508251805191926109be92849290910190610a25565b5060208281015180516109d79260018501920190610a25565b50604082015180516109f3916002840191602090910190610a25565b5060608201518051610a0f916003840191602090910190610a25565b5060808201518160040155905050505050505050565b828054610a3190611011565b90600052602060002090601f016020900481019282610a535760008555610a99565b82601f10610a6c57805160ff1916838001178555610a99565b82800160010185558215610a99579182015b82811115610a99578251825591602001919060010190610a7e565b50610aa5929150610aa9565b5090565b5b80821115610aa55760008155600101610aaa565b60008083601f840112610ad057600080fd5b50813567ffffffffffffffff811115610ae857600080fd5b602083019150836020828501011115610b0057600080fd5b9250929050565b60008060008060008060008060008060c08b8d031215610b2657600080fd5b8a35995060208b013567ffffffffffffffff80821115610b4557600080fd5b610b518e838f01610abe565b909b50995060408d0135915080821115610b6a57600080fd5b610b768e838f01610abe565b909950975060608d0135915080821115610b8f57600080fd5b610b9b8e838f01610abe565b909750955060808d0135915080821115610bb457600080fd5b50610bc18d828e01610abe565b9150809450508092505060a08b013590509295989b9194979a5092959850565b60008060008060008060608789031215610bfa57600080fd5b863567ffffffffffffffff80821115610c1257600080fd5b610c1e8a838b01610abe565b90985096506020890135915080821115610c3757600080fd5b610c438a838b01610abe565b90965094506040890135915080821115610c5c57600080fd5b50610c6989828a01610abe565b979a9699509497509295939492505050565b80356001600160a01b0381168114610c9257600080fd5b919050565b60008060008060008060008060008060c08b8d031215610cb657600080fd5b8a3567ffffffffffffffff80821115610cce57600080fd5b610cda8e838f01610abe565b909c509a5060208d0135915080821115610cf357600080fd5b610cff8e838f01610abe565b909a50985060408d0135915080821115610d1857600080fd5b610d248e838f01610abe565b9098509650869150610d3860608e01610c7b565b955060808d0135915080821115610bb457600080fd5b6000815180845260005b81811015610d7457602081850181015186830182015201610d58565b81811115610d86576000602083870101525b50601f01601f19169290920160200192915050565b60a081526000610dae60a0830188610d4e565b8281036020840152610dc08188610d4e565b90508281036040840152610dd48187610d4e565b90508281036060840152610de88186610d4e565b9150508260808301529695505050505050565b60008060008060008060006080888a031215610e1657600080fd5b87359650602088013567ffffffffffffffff80821115610e3557600080fd5b610e418b838c01610abe565b909850965060408a0135915080821115610e5a57600080fd5b610e668b838c01610abe565b909650945060608a0135915080821115610e7f57600080fd5b50610e8c8a828b01610abe565b989b979a50959850939692959293505050565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b89815260c060208201526000610ef260c083018a8c610eaf565b8281036040840152610f0581898b610eaf565b90508660608401528281036080840152610f20818688610eaf565b9150508260a08301529a9950505050505050505050565b600060208284031215610f4957600080fd5b81518015158114610f5957600080fd5b9392505050565b606081526000610f7460608301888a610eaf565b8281036020840152610f87818789610eaf565b90508281036040840152610f9c818587610eaf565b9998505050505050505050565b60a081526000610fbd60a083018b8d610eaf565b8281036020840152610fd0818a8c610eaf565b90508281036040840152610fe581888a610eaf565b90508281036060840152610ffa818688610eaf565b9150508260808301529a9950505050505050505050565b600181811c9082168061102557607f821691505b6020821081141561104657634e487b7160e01b600052602260045260246000fd5b50919050565b868152608060208201526000611066608083018789610eaf565b8281036040840152611079818688610eaf565b91505082606083015297965050505050505056fea26469706673582212204a953a17e1254c30208043f8df2747db9900b5d9d6046918f7a2280e62fb81fa64736f6c63430008090033"

    @classmethod
    def deploy(cls, gateway: Address, *, from_: Optional[Union[Address, str]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max") -> ExampleContract:
        """
        Args:
            gateway: address
        """
        return cls._deploy([gateway], from_, value, gas_limit, {})

    @dataclass
    class Message:
        sourceChain: str
        sourceAddress: str
        payload: Union[bytearray, bytes]
        tokenSymbol: str
        tokenAmount: uint256


    @overload
    def lastMessage(self, *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=False, request_type: RequestType='default') -> ExampleContract.Message:
        ...

    @overload
    def lastMessage(self, *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=True, request_type: RequestType='default') -> TransactionObject:
        ...

    def lastMessage(self, *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=False, request_type: RequestType='call') -> Union[ExampleContract.Message, TransactionObject]:
        """
        Returns:
            struct ExampleContract.Message
        """
        return self._transact("32970710", [], return_tx, request_type, ExampleContract.Message, from_, to, value, gas_limit) if not request_type == 'call' else self._call("32970710", [], return_tx, ExampleContract.Message, from_, to, value, gas_limit)

    @overload
    def send(self, destinationChain: str, destinationAddress: str, payload: Union[bytearray, bytes], *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=False, request_type: RequestType='default') -> None:
        ...

    @overload
    def send(self, destinationChain: str, destinationAddress: str, payload: Union[bytearray, bytes], *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=True, request_type: RequestType='default') -> TransactionObject:
        ...

    def send(self, destinationChain: str, destinationAddress: str, payload: Union[bytearray, bytes], *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=False, request_type: RequestType='default') -> Union[None, TransactionObject]:
        """
        Args:
            destinationChain: string
            destinationAddress: string
            payload: bytes
        """
        return self._transact("1e0d43b9", [destinationChain, destinationAddress, payload], return_tx, request_type, type(None), from_, to, value, gas_limit) if not request_type == 'call' else self._call("1e0d43b9", [destinationChain, destinationAddress, payload], return_tx, type(None), from_, to, value, gas_limit)

    @overload
    def sendWithToken(self, destinationChain: str, destinationAddress: str, payload: Union[bytearray, bytes], token: IERC20, symbol: str, amount: uint256, *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=False, request_type: RequestType='default') -> None:
        ...

    @overload
    def sendWithToken(self, destinationChain: str, destinationAddress: str, payload: Union[bytearray, bytes], token: IERC20, symbol: str, amount: uint256, *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=True, request_type: RequestType='default') -> TransactionObject:
        ...

    def sendWithToken(self, destinationChain: str, destinationAddress: str, payload: Union[bytearray, bytes], token: IERC20, symbol: str, amount: uint256, *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=False, request_type: RequestType='default') -> Union[None, TransactionObject]:
        """
        Args:
            destinationChain: string
            destinationAddress: string
            payload: bytes
            token: contract IERC20
            symbol: string
            amount: uint256
        """
        return self._transact("29ae606b", [destinationChain, destinationAddress, payload, token, symbol, amount], return_tx, request_type, type(None), from_, to, value, gas_limit) if not request_type == 'call' else self._call("29ae606b", [destinationChain, destinationAddress, payload, token, symbol, amount], return_tx, type(None), from_, to, value, gas_limit)

