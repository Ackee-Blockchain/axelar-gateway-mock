from __future__ import annotations

import random 
from dataclasses import dataclass 
from typing import List, NewType, Optional, overload, Union
from typing_extensions import Literal

from woke.testing.contract import Contract, TransactionObject, Address, Wei

from enum import IntEnum
from woke.testing.abi_to_type import RequestType

from pytypes.axelarnetwork.axelargmpsdksolidity.contracts.executables.AxelarExecutable import AxelarExecutable
from pytypes.axelarnetwork.axelargmpsdksolidity.contracts.interfaces.IERC20 import IERC20

from woke.testing.primitive_types import uint256


class ExampleContract(AxelarExecutable):
    _abi = {'constructor': {'inputs': [{'internalType': 'address', 'name': 'gateway', 'type': 'address'}], 'stateMutability': 'nonpayable', 'type': 'constructor'}, b'\xe6\xc4${': {'inputs': [], 'name': 'InvalidAddress', 'type': 'error'}, b'P\x0cD\xb4': {'inputs': [], 'name': 'NotApprovedByGateway', 'type': 'error'}, b'I\x16\x06X': {'inputs': [{'internalType': 'bytes32', 'name': 'commandId', 'type': 'bytes32'}, {'internalType': 'string', 'name': 'sourceChain', 'type': 'string'}, {'internalType': 'string', 'name': 'sourceAddress', 'type': 'string'}, {'internalType': 'bytes', 'name': 'payload', 'type': 'bytes'}], 'name': 'execute', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\x1a\x98\xb2\xe0': {'inputs': [{'internalType': 'bytes32', 'name': 'commandId', 'type': 'bytes32'}, {'internalType': 'string', 'name': 'sourceChain', 'type': 'string'}, {'internalType': 'string', 'name': 'sourceAddress', 'type': 'string'}, {'internalType': 'bytes', 'name': 'payload', 'type': 'bytes'}, {'internalType': 'string', 'name': 'tokenSymbol', 'type': 'string'}, {'internalType': 'uint256', 'name': 'amount', 'type': 'uint256'}], 'name': 'executeWithToken', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\x11a\x91\xb6': {'inputs': [], 'name': 'gateway', 'outputs': [{'internalType': 'contract IAxelarGateway', 'name': '', 'type': 'address'}], 'stateMutability': 'view', 'type': 'function'}, b'2\x97\x07\x10': {'inputs': [], 'name': 'lastMessage', 'outputs': [{'internalType': 'string', 'name': 'sourceChain', 'type': 'string'}, {'internalType': 'string', 'name': 'sourceAddress', 'type': 'string'}, {'internalType': 'bytes', 'name': 'payload', 'type': 'bytes'}, {'internalType': 'string', 'name': 'tokenSymbol', 'type': 'string'}, {'internalType': 'uint256', 'name': 'tokenAmount', 'type': 'uint256'}], 'stateMutability': 'view', 'type': 'function'}, b'\x1e\rC\xb9': {'inputs': [{'internalType': 'string', 'name': 'destinationChain', 'type': 'string'}, {'internalType': 'string', 'name': 'destinationAddress', 'type': 'string'}, {'internalType': 'bytes', 'name': 'payload', 'type': 'bytes'}], 'name': 'send', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, b')\xae`k': {'inputs': [{'internalType': 'string', 'name': 'destinationChain', 'type': 'string'}, {'internalType': 'string', 'name': 'destinationAddress', 'type': 'string'}, {'internalType': 'bytes', 'name': 'payload', 'type': 'bytes'}, {'internalType': 'contract IERC20', 'name': 'token', 'type': 'address'}, {'internalType': 'string', 'name': 'symbol', 'type': 'string'}, {'internalType': 'uint256', 'name': 'amount', 'type': 'uint256'}], 'name': 'sendWithToken', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}}
    _bytecode = b'`\xa0`@R4\x80\x15a\x00\x10W`\x00\x80\xfd[P`@Qa\x11\x998\x03\x80a\x11\x99\x839\x81\x01`@\x81\x90Ra\x00/\x91a\x00iV[\x80`\x01`\x01`\xa0\x1b\x03\x81\x16a\x00WW`@Qc\xe6\xc4${`\xe0\x1b\x81R`\x04\x01`@Q\x80\x91\x03\x90\xfd[`\x01`\x01`\xa0\x1b\x03\x16`\x80RPa\x00\x99V[`\x00` \x82\x84\x03\x12\x15a\x00{W`\x00\x80\xfd[\x81Q`\x01`\x01`\xa0\x1b\x03\x81\x16\x81\x14a\x00\x92W`\x00\x80\xfd[\x93\x92PPPV[`\x80Qa\x10\xc3a\x00\xd6`\x009`\x00\x81\x81`l\x01R\x81\x81a\x01C\x01R\x81\x81a\x02,\x01R\x81\x81a\x02\xbc\x01R\x81\x81a\x03\x9f\x01Ra\x06\x95\x01Ra\x10\xc3`\x00\xf3\xfe`\x80`@R4\x80\x15a\x00\x10W`\x00\x80\xfd[P`\x046\x10a\x00bW`\x005`\xe0\x1c\x80c\x11a\x91\xb6\x14a\x00gW\x80c\x1a\x98\xb2\xe0\x14a\x00\xabW\x80c\x1e\rC\xb9\x14a\x00\xc0W\x80c)\xae`k\x14a\x00\xd3W\x80c2\x97\x07\x10\x14a\x00\xe6W\x80cI\x16\x06X\x14a\x00\xffW[`\x00\x80\xfd[a\x00\x8e\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x81V[`@Q`\x01`\x01`\xa0\x1b\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xf3[a\x00\xbea\x00\xb96`\x04a\x0b\x07V[a\x01\x12V[\x00[a\x00\xbea\x00\xce6`\x04a\x0b\xe1V[a\x02\x15V[a\x00\xbea\x00\xe16`\x04a\x0c\x97V[a\x02\xa5V[a\x00\xeea\x04"V[`@Qa\x00\xa2\x95\x94\x93\x92\x91\x90a\r\x9bV[a\x00\xbea\x01\r6`\x04a\r\xfbV[a\x06dV[`\x00\x85\x85`@Qa\x01$\x92\x91\x90a\x0e\x9fV[`@Q\x90\x81\x90\x03\x81 c\x18v\xee\xd9`\xe0\x1b\x82R\x91P`\x01`\x01`\xa0\x1b\x03\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x90c\x18v\xee\xd9\x90a\x01\x88\x90\x8e\x90\x8e\x90\x8e\x90\x8e\x90\x8e\x90\x89\x90\x8d\x90\x8d\x90\x8d\x90`\x04\x01a\x0e\xd8V[` `@Q\x80\x83\x03\x81`\x00\x87\x80;\x15\x80\x15a\x01\xa2W`\x00\x80\xfd[PZ\xf1\x15\x80\x15a\x01\xb6W=`\x00\x80>=`\x00\xfd[PPPP`@Q=`\x1f\x19`\x1f\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\xda\x91\x90a\x0f7V[a\x01\xf7W`@Qc\x14\x03\x11-`\xe2\x1b\x81R`\x04\x01`@Q\x80\x91\x03\x90\xfd[a\x02\x08\x8a\x8a\x8a\x8a\x8a\x8a\x8a\x8a\x8aa\x07[V[PPPPPPPPPPPV[`@Qc\x1c\x92\x11_`\xe0\x1b\x81R`\x01`\x01`\xa0\x1b\x03\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x90c\x1c\x92\x11_\x90a\x02k\x90\x89\x90\x89\x90\x89\x90\x89\x90\x89\x90\x89\x90`\x04\x01a\x0f`V[`\x00`@Q\x80\x83\x03\x81`\x00\x87\x80;\x15\x80\x15a\x02\x85W`\x00\x80\xfd[PZ\xf1\x15\x80\x15a\x02\x99W=`\x00\x80>=`\x00\xfd[PPPPPPPPPPV[`@Qc\t^\xa7\xb3`\xe0\x1b\x81R`\x01`\x01`\xa0\x1b\x03\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x81\x16`\x04\x83\x01R`$\x82\x01\x83\x90R\x85\x16\x90c\t^\xa7\xb3\x90`D\x01` `@Q\x80\x83\x03\x81`\x00\x87\x80;\x15\x80\x15a\x03\x0fW`\x00\x80\xfd[PZ\xf1\x15\x80\x15a\x03#W=`\x00\x80>=`\x00\xfd[PPPP`@Q=`\x1f\x19`\x1f\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03G\x91\x90a\x0f7V[a\x03\x88W`@QbF\x1b\xcd`\xe5\x1b\x81R` `\x04\x82\x01R`\x0e`$\x82\x01Rm\x10T\x14\x14\x93\xd5\x91W\xd1\x90RS\x11Q`\x92\x1b`D\x82\x01R`d\x01`@Q\x80\x91\x03\x90\xfd[`@Qc-P\\!`\xe2\x1b\x81R`\x01`\x01`\xa0\x1b\x03\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x90c\xb5Ap\x84\x90a\x03\xe4\x90\x8d\x90\x8d\x90\x8d\x90\x8d\x90\x8d\x90\x8d\x90\x8c\x90\x8c\x90\x8c\x90`\x04\x01a\x0f\xa9V[`\x00`@Q\x80\x83\x03\x81`\x00\x87\x80;\x15\x80\x15a\x03\xfeW`\x00\x80\xfd[PZ\xf1\x15\x80\x15a\x04\x12W=`\x00\x80>=`\x00\xfd[PPPPPPPPPPPPPPV[`\x00\x80T\x81\x90a\x041\x90a\x10\x11V[\x80`\x1f\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x04]\x90a\x10\x11V[\x80\x15a\x04\xaaW\x80`\x1f\x10a\x04\x7fWa\x01\x00\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x04\xaaV[\x82\x01\x91\x90`\x00R` `\x00 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x04\x8dW\x82\x90\x03`\x1f\x16\x82\x01\x91[PPPPP\x90\x80`\x01\x01\x80Ta\x04\xbf\x90a\x10\x11V[\x80`\x1f\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x04\xeb\x90a\x10\x11V[\x80\x15a\x058W\x80`\x1f\x10a\x05\rWa\x01\x00\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x058V[\x82\x01\x91\x90`\x00R` `\x00 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x05\x1bW\x82\x90\x03`\x1f\x16\x82\x01\x91[PPPPP\x90\x80`\x02\x01\x80Ta\x05M\x90a\x10\x11V[\x80`\x1f\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x05y\x90a\x10\x11V[\x80\x15a\x05\xc6W\x80`\x1f\x10a\x05\x9bWa\x01\x00\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x05\xc6V[\x82\x01\x91\x90`\x00R` `\x00 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x05\xa9W\x82\x90\x03`\x1f\x16\x82\x01\x91[PPPPP\x90\x80`\x03\x01\x80Ta\x05\xdb\x90a\x10\x11V[\x80`\x1f\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x06\x07\x90a\x10\x11V[\x80\x15a\x06TW\x80`\x1f\x10a\x06)Wa\x01\x00\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x06TV[\x82\x01\x91\x90`\x00R` `\x00 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x067W\x82\x90\x03`\x1f\x16\x82\x01\x91[PPPPP\x90\x80`\x04\x01T\x90P\x85V[`\x00\x82\x82`@Qa\x06v\x92\x91\x90a\x0e\x9fV[`@Q\x90\x81\x90\x03\x81 c_ip\xc3`\xe0\x1b\x82R\x91P`\x01`\x01`\xa0\x1b\x03\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x90c_ip\xc3\x90a\x06\xd4\x90\x8b\x90\x8b\x90\x8b\x90\x8b\x90\x8b\x90\x89\x90`\x04\x01a\x10LV[` `@Q\x80\x83\x03\x81`\x00\x87\x80;\x15\x80\x15a\x06\xeeW`\x00\x80\xfd[PZ\xf1\x15\x80\x15a\x07\x02W=`\x00\x80>=`\x00\xfd[PPPP`@Q=`\x1f\x19`\x1f\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07&\x91\x90a\x0f7V[a\x07CW`@Qc\x14\x03\x11-`\xe2\x1b\x81R`\x04\x01`@Q\x80\x91\x03\x90\xfd[a\x07Q\x87\x87\x87\x87\x87\x87a\x08\xd6V[PPPPPPPPV[`@Q\x80`\xa0\x01`@R\x80\x8a\x8a\x80\x80`\x1f\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847`\x00\x92\x01\x91\x90\x91RPPP\x90\x82RP`@\x80Q` `\x1f\x8b\x01\x81\x90\x04\x81\x02\x82\x01\x81\x01\x90\x92R\x89\x81R\x91\x81\x01\x91\x90\x8a\x90\x8a\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847`\x00\x92\x01\x91\x90\x91RPPP\x90\x82RP`@\x80Q` `\x1f\x89\x01\x81\x90\x04\x81\x02\x82\x01\x81\x01\x90\x92R\x87\x81R\x91\x81\x01\x91\x90\x88\x90\x88\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847`\x00\x92\x01\x91\x90\x91RPPP\x90\x82RP`@\x80Q` `\x1f\x87\x01\x81\x90\x04\x81\x02\x82\x01\x81\x01\x90\x92R\x85\x81R\x91\x81\x01\x91\x90\x86\x90\x86\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847`\x00\x92\x01\x82\x90RP\x93\x85RPPP` \x91\x82\x01\x84\x90R\x82Q\x80Q\x91\x92a\x08l\x92\x84\x92\x90\x91\x01\x90a\n%V[P` \x82\x81\x01Q\x80Qa\x08\x85\x92`\x01\x85\x01\x92\x01\x90a\n%V[P`@\x82\x01Q\x80Qa\x08\xa1\x91`\x02\x84\x01\x91` \x90\x91\x01\x90a\n%V[P``\x82\x01Q\x80Qa\x08\xbd\x91`\x03\x84\x01\x91` \x90\x91\x01\x90a\n%V[P`\x80\x82\x01Q\x81`\x04\x01U\x90PPPPPPPPPPPV[`@Q\x80`\xa0\x01`@R\x80\x87\x87\x80\x80`\x1f\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847`\x00\x92\x01\x91\x90\x91RPPP\x90\x82RP`@\x80Q` `\x1f\x88\x01\x81\x90\x04\x81\x02\x82\x01\x81\x01\x90\x92R\x86\x81R\x91\x81\x01\x91\x90\x87\x90\x87\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847`\x00\x92\x01\x91\x90\x91RPPP\x90\x82RP`@\x80Q` `\x1f\x86\x01\x81\x90\x04\x81\x02\x82\x01\x81\x01\x90\x92R\x84\x81R\x91\x81\x01\x91\x90\x85\x90\x85\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847`\x00\x92\x01\x82\x90RP\x93\x85RPP`@\x80Q` \x81\x81\x01\x83R\x84\x82R\x80\x86\x01\x91\x90\x91R\x93\x01\x82\x90RP\x82Q\x80Q\x91\x92a\t\xbe\x92\x84\x92\x90\x91\x01\x90a\n%V[P` \x82\x81\x01Q\x80Qa\t\xd7\x92`\x01\x85\x01\x92\x01\x90a\n%V[P`@\x82\x01Q\x80Qa\t\xf3\x91`\x02\x84\x01\x91` \x90\x91\x01\x90a\n%V[P``\x82\x01Q\x80Qa\n\x0f\x91`\x03\x84\x01\x91` \x90\x91\x01\x90a\n%V[P`\x80\x82\x01Q\x81`\x04\x01U\x90PPPPPPPPV[\x82\x80Ta\n1\x90a\x10\x11V[\x90`\x00R` `\x00 \x90`\x1f\x01` \x90\x04\x81\x01\x92\x82a\nSW`\x00\x85Ua\n\x99V[\x82`\x1f\x10a\nlW\x80Q`\xff\x19\x16\x83\x80\x01\x17\x85Ua\n\x99V[\x82\x80\x01`\x01\x01\x85U\x82\x15a\n\x99W\x91\x82\x01[\x82\x81\x11\x15a\n\x99W\x82Q\x82U\x91` \x01\x91\x90`\x01\x01\x90a\n~V[Pa\n\xa5\x92\x91Pa\n\xa9V[P\x90V[[\x80\x82\x11\x15a\n\xa5W`\x00\x81U`\x01\x01a\n\xaaV[`\x00\x80\x83`\x1f\x84\x01\x12a\n\xd0W`\x00\x80\xfd[P\x815g\xff\xff\xff\xff\xff\xff\xff\xff\x81\x11\x15a\n\xe8W`\x00\x80\xfd[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x0b\x00W`\x00\x80\xfd[\x92P\x92\x90PV[`\x00\x80`\x00\x80`\x00\x80`\x00\x80`\x00\x80`\xc0\x8b\x8d\x03\x12\x15a\x0b&W`\x00\x80\xfd[\x8a5\x99P` \x8b\x015g\xff\xff\xff\xff\xff\xff\xff\xff\x80\x82\x11\x15a\x0bEW`\x00\x80\xfd[a\x0bQ\x8e\x83\x8f\x01a\n\xbeV[\x90\x9bP\x99P`@\x8d\x015\x91P\x80\x82\x11\x15a\x0bjW`\x00\x80\xfd[a\x0bv\x8e\x83\x8f\x01a\n\xbeV[\x90\x99P\x97P``\x8d\x015\x91P\x80\x82\x11\x15a\x0b\x8fW`\x00\x80\xfd[a\x0b\x9b\x8e\x83\x8f\x01a\n\xbeV[\x90\x97P\x95P`\x80\x8d\x015\x91P\x80\x82\x11\x15a\x0b\xb4W`\x00\x80\xfd[Pa\x0b\xc1\x8d\x82\x8e\x01a\n\xbeV[\x91P\x80\x94PP\x80\x92PP`\xa0\x8b\x015\x90P\x92\x95\x98\x9b\x91\x94\x97\x9aP\x92\x95\x98PV[`\x00\x80`\x00\x80`\x00\x80``\x87\x89\x03\x12\x15a\x0b\xfaW`\x00\x80\xfd[\x865g\xff\xff\xff\xff\xff\xff\xff\xff\x80\x82\x11\x15a\x0c\x12W`\x00\x80\xfd[a\x0c\x1e\x8a\x83\x8b\x01a\n\xbeV[\x90\x98P\x96P` \x89\x015\x91P\x80\x82\x11\x15a\x0c7W`\x00\x80\xfd[a\x0cC\x8a\x83\x8b\x01a\n\xbeV[\x90\x96P\x94P`@\x89\x015\x91P\x80\x82\x11\x15a\x0c\\W`\x00\x80\xfd[Pa\x0ci\x89\x82\x8a\x01a\n\xbeV[\x97\x9a\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[\x805`\x01`\x01`\xa0\x1b\x03\x81\x16\x81\x14a\x0c\x92W`\x00\x80\xfd[\x91\x90PV[`\x00\x80`\x00\x80`\x00\x80`\x00\x80`\x00\x80`\xc0\x8b\x8d\x03\x12\x15a\x0c\xb6W`\x00\x80\xfd[\x8a5g\xff\xff\xff\xff\xff\xff\xff\xff\x80\x82\x11\x15a\x0c\xceW`\x00\x80\xfd[a\x0c\xda\x8e\x83\x8f\x01a\n\xbeV[\x90\x9cP\x9aP` \x8d\x015\x91P\x80\x82\x11\x15a\x0c\xf3W`\x00\x80\xfd[a\x0c\xff\x8e\x83\x8f\x01a\n\xbeV[\x90\x9aP\x98P`@\x8d\x015\x91P\x80\x82\x11\x15a\r\x18W`\x00\x80\xfd[a\r$\x8e\x83\x8f\x01a\n\xbeV[\x90\x98P\x96P\x86\x91Pa\r8``\x8e\x01a\x0c{V[\x95P`\x80\x8d\x015\x91P\x80\x82\x11\x15a\x0b\xb4W`\x00\x80\xfd[`\x00\x81Q\x80\x84R`\x00[\x81\x81\x10\x15a\rtW` \x81\x85\x01\x81\x01Q\x86\x83\x01\x82\x01R\x01a\rXV[\x81\x81\x11\x15a\r\x86W`\x00` \x83\x87\x01\x01R[P`\x1f\x01`\x1f\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[`\xa0\x81R`\x00a\r\xae`\xa0\x83\x01\x88a\rNV[\x82\x81\x03` \x84\x01Ra\r\xc0\x81\x88a\rNV[\x90P\x82\x81\x03`@\x84\x01Ra\r\xd4\x81\x87a\rNV[\x90P\x82\x81\x03``\x84\x01Ra\r\xe8\x81\x86a\rNV[\x91PP\x82`\x80\x83\x01R\x96\x95PPPPPPV[`\x00\x80`\x00\x80`\x00\x80`\x00`\x80\x88\x8a\x03\x12\x15a\x0e\x16W`\x00\x80\xfd[\x875\x96P` \x88\x015g\xff\xff\xff\xff\xff\xff\xff\xff\x80\x82\x11\x15a\x0e5W`\x00\x80\xfd[a\x0eA\x8b\x83\x8c\x01a\n\xbeV[\x90\x98P\x96P`@\x8a\x015\x91P\x80\x82\x11\x15a\x0eZW`\x00\x80\xfd[a\x0ef\x8b\x83\x8c\x01a\n\xbeV[\x90\x96P\x94P``\x8a\x015\x91P\x80\x82\x11\x15a\x0e\x7fW`\x00\x80\xfd[Pa\x0e\x8c\x8a\x82\x8b\x01a\n\xbeV[\x98\x9b\x97\x9aP\x95\x98P\x93\x96\x92\x95\x92\x93PPPV[\x81\x83\x827`\x00\x91\x01\x90\x81R\x91\x90PV[\x81\x83R\x81\x81` \x85\x017P`\x00\x82\x82\x01` \x90\x81\x01\x91\x90\x91R`\x1f\x90\x91\x01`\x1f\x19\x16\x90\x91\x01\x01\x90V[\x89\x81R`\xc0` \x82\x01R`\x00a\x0e\xf2`\xc0\x83\x01\x8a\x8ca\x0e\xafV[\x82\x81\x03`@\x84\x01Ra\x0f\x05\x81\x89\x8ba\x0e\xafV[\x90P\x86``\x84\x01R\x82\x81\x03`\x80\x84\x01Ra\x0f \x81\x86\x88a\x0e\xafV[\x91PP\x82`\xa0\x83\x01R\x9a\x99PPPPPPPPPPV[`\x00` \x82\x84\x03\x12\x15a\x0fIW`\x00\x80\xfd[\x81Q\x80\x15\x15\x81\x14a\x0fYW`\x00\x80\xfd[\x93\x92PPPV[``\x81R`\x00a\x0ft``\x83\x01\x88\x8aa\x0e\xafV[\x82\x81\x03` \x84\x01Ra\x0f\x87\x81\x87\x89a\x0e\xafV[\x90P\x82\x81\x03`@\x84\x01Ra\x0f\x9c\x81\x85\x87a\x0e\xafV[\x99\x98PPPPPPPPPV[`\xa0\x81R`\x00a\x0f\xbd`\xa0\x83\x01\x8b\x8da\x0e\xafV[\x82\x81\x03` \x84\x01Ra\x0f\xd0\x81\x8a\x8ca\x0e\xafV[\x90P\x82\x81\x03`@\x84\x01Ra\x0f\xe5\x81\x88\x8aa\x0e\xafV[\x90P\x82\x81\x03``\x84\x01Ra\x0f\xfa\x81\x86\x88a\x0e\xafV[\x91PP\x82`\x80\x83\x01R\x9a\x99PPPPPPPPPPV[`\x01\x81\x81\x1c\x90\x82\x16\x80a\x10%W`\x7f\x82\x16\x91P[` \x82\x10\x81\x14\x15a\x10FWcNH{q`\xe0\x1b`\x00R`"`\x04R`$`\x00\xfd[P\x91\x90PV[\x86\x81R`\x80` \x82\x01R`\x00a\x10f`\x80\x83\x01\x87\x89a\x0e\xafV[\x82\x81\x03`@\x84\x01Ra\x10y\x81\x86\x88a\x0e\xafV[\x91PP\x82``\x83\x01R\x97\x96PPPPPPPV\xfe\xa2dipfsX"\x12 J\x95:\x17\xe1%L0 \x80C\xf8\xdf\'G\xdb\x99\x00\xb5\xd9\xd6\x04i\x18\xf7\xa2(\x0eb\xfb\x81\xfadsolcC\x00\x08\t\x003'

    @classmethod
    def deploy(cls, gateway: Address, *, from_: Optional[Union[Address, str]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max") -> ExampleContract:
        """
        Args:
            gateway: address
        """
        return cls._deploy([gateway], from_, value, gas_limit)

    @dataclass
    class Message:
        sourceChain: str
        sourceAddress: str
        payload: Union[bytearray, bytes]
        tokenSymbol: str
        tokenAmount: uint256


    @overload
    def lastMessage(self, *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=False, request_type: RequestType='default') -> ExampleContract.Message:
        ...

    @overload
    def lastMessage(self, *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=True, request_type: RequestType='default') -> TransactionObject:
        ...

    def lastMessage(self, *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=False, request_type: RequestType='call') -> Union[ExampleContract.Message, TransactionObject]:
        """
        Returns:
            struct ExampleContract.Message
        """
        return self._transact("32970710", [], return_tx, request_type, ExampleContract.Message, from_, to, value, gas_limit) if not request_type == 'call' else self._call("32970710", [], return_tx, ExampleContract.Message, from_, to, value, gas_limit)

    @overload
    def send(self, destinationChain: str, destinationAddress: str, payload: Union[bytearray, bytes], *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=False, request_type: RequestType='default') -> None:
        ...

    @overload
    def send(self, destinationChain: str, destinationAddress: str, payload: Union[bytearray, bytes], *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=True, request_type: RequestType='default') -> TransactionObject:
        ...

    def send(self, destinationChain: str, destinationAddress: str, payload: Union[bytearray, bytes], *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=False, request_type: RequestType='default') -> Union[None, TransactionObject]:
        """
        Args:
            destinationChain: string
            destinationAddress: string
            payload: bytes
        """
        return self._transact("1e0d43b9", [destinationChain, destinationAddress, payload], return_tx, request_type, type(None), from_, to, value, gas_limit) if not request_type == 'call' else self._call("1e0d43b9", [destinationChain, destinationAddress, payload], return_tx, type(None), from_, to, value, gas_limit)

    @overload
    def sendWithToken(self, destinationChain: str, destinationAddress: str, payload: Union[bytearray, bytes], token: IERC20, symbol: str, amount: uint256, *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=False, request_type: RequestType='default') -> None:
        ...

    @overload
    def sendWithToken(self, destinationChain: str, destinationAddress: str, payload: Union[bytearray, bytes], token: IERC20, symbol: str, amount: uint256, *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=True, request_type: RequestType='default') -> TransactionObject:
        ...

    def sendWithToken(self, destinationChain: str, destinationAddress: str, payload: Union[bytearray, bytes], token: IERC20, symbol: str, amount: uint256, *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=False, request_type: RequestType='default') -> Union[None, TransactionObject]:
        """
        Args:
            destinationChain: string
            destinationAddress: string
            payload: bytes
            token: contract IERC20
            symbol: string
            amount: uint256
        """
        return self._transact("29ae606b", [destinationChain, destinationAddress, payload, token, symbol, amount], return_tx, request_type, type(None), from_, to, value, gas_limit) if not request_type == 'call' else self._call("29ae606b", [destinationChain, destinationAddress, payload, token, symbol, amount], return_tx, type(None), from_, to, value, gas_limit)

