from __future__ import annotations

import random 
from dataclasses import dataclass 
from typing import List, NewType, Optional, overload, Union
from typing_extensions import Literal

from woke.testing.contract import Contract, TransactionObject, Address, Wei

from enum import IntEnum
from woke.testing.abi_to_type import RequestType

from pytypes.axelarnetwork.axelargmpsdksolidity.contracts.interfaces.IERC20MintableBurnable import IERC20MintableBurnable
from pytypes.axelarnetwork.axelargmpsdksolidity.contracts.test.ERC20 import ERC20

from woke.testing.primitive_types import uint8
from woke.testing.primitive_types import uint256


class ERC20MintableBurnable(IERC20MintableBurnable, ERC20):
    _abi = {'constructor': {'inputs': [{'internalType': 'string', 'name': 'name_', 'type': 'string'}, {'internalType': 'string', 'name': 'symbol_', 'type': 'string'}, {'internalType': 'uint8', 'name': 'decimals_', 'type': 'uint8'}], 'stateMutability': 'nonpayable', 'type': 'constructor'}, b'*\x1b-\xd8': {'inputs': [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}, {'internalType': 'uint256', 'name': '', 'type': 'uint256'}], 'name': 'InsufficientAllowance', 'type': 'error'}, b'm\x18{(': {'inputs': [], 'name': 'InvalidAccount', 'type': 'error'}, b'\x8c[\xe1\xe5\xeb\xec}[\xd1OqB}\x1e\x84\xf3\xdd\x03\x14\xc0\xf7\xb2)\x1e[ \n\xc8\xc7\xc3\xb9%': {'anonymous': False, 'inputs': [{'indexed': True, 'internalType': 'address', 'name': 'owner', 'type': 'address'}, {'indexed': True, 'internalType': 'address', 'name': 'spender', 'type': 'address'}, {'indexed': False, 'internalType': 'uint256', 'name': 'value', 'type': 'uint256'}], 'name': 'Approval', 'type': 'event'}, b'\xdd\xf2R\xad\x1b\xe2\xc8\x9bi\xc2\xb0h\xfc7\x8d\xaa\x95+\xa7\xf1c\xc4\xa1\x16(\xf5ZM\xf5#\xb3\xef': {'anonymous': False, 'inputs': [{'indexed': True, 'internalType': 'address', 'name': 'from', 'type': 'address'}, {'indexed': True, 'internalType': 'address', 'name': 'to', 'type': 'address'}, {'indexed': False, 'internalType': 'uint256', 'name': 'value', 'type': 'uint256'}], 'name': 'Transfer', 'type': 'event'}, b'\xddb\xed>': {'inputs': [{'internalType': 'address', 'name': '', 'type': 'address'}, {'internalType': 'address', 'name': '', 'type': 'address'}], 'name': 'allowance', 'outputs': [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}], 'stateMutability': 'view', 'type': 'function'}, b'\t^\xa7\xb3': {'inputs': [{'internalType': 'address', 'name': 'spender', 'type': 'address'}, {'internalType': 'uint256', 'name': 'amount', 'type': 'uint256'}], 'name': 'approve', 'outputs': [{'internalType': 'bool', 'name': '', 'type': 'bool'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'p\xa0\x821': {'inputs': [{'internalType': 'address', 'name': '', 'type': 'address'}], 'name': 'balanceOf', 'outputs': [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}], 'stateMutability': 'view', 'type': 'function'}, b'\x9d\xc2\x9f\xac': {'inputs': [{'internalType': 'address', 'name': 'account', 'type': 'address'}, {'internalType': 'uint256', 'name': 'amount', 'type': 'uint256'}], 'name': 'burn', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, b'1<\xe5g': {'inputs': [], 'name': 'decimals', 'outputs': [{'internalType': 'uint8', 'name': '', 'type': 'uint8'}], 'stateMutability': 'view', 'type': 'function'}, b'\xa4W\xc2\xd7': {'inputs': [{'internalType': 'address', 'name': 'spender', 'type': 'address'}, {'internalType': 'uint256', 'name': 'subtractedValue', 'type': 'uint256'}], 'name': 'decreaseAllowance', 'outputs': [{'internalType': 'bool', 'name': '', 'type': 'bool'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'9P\x93Q': {'inputs': [{'internalType': 'address', 'name': 'spender', 'type': 'address'}, {'internalType': 'uint256', 'name': 'addedValue', 'type': 'uint256'}], 'name': 'increaseAllowance', 'outputs': [{'internalType': 'bool', 'name': '', 'type': 'bool'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'@\xc1\x0f\x19': {'inputs': [{'internalType': 'address', 'name': 'account', 'type': 'address'}, {'internalType': 'uint256', 'name': 'amount', 'type': 'uint256'}], 'name': 'mint', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\x06\xfd\xde\x03': {'inputs': [], 'name': 'name', 'outputs': [{'internalType': 'string', 'name': '', 'type': 'string'}], 'stateMutability': 'view', 'type': 'function'}, b'\x95\xd8\x9bA': {'inputs': [], 'name': 'symbol', 'outputs': [{'internalType': 'string', 'name': '', 'type': 'string'}], 'stateMutability': 'view', 'type': 'function'}, b'\x18\x16\r\xdd': {'inputs': [], 'name': 'totalSupply', 'outputs': [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}], 'stateMutability': 'view', 'type': 'function'}, b'\xa9\x05\x9c\xbb': {'inputs': [{'internalType': 'address', 'name': 'recipient', 'type': 'address'}, {'internalType': 'uint256', 'name': 'amount', 'type': 'uint256'}], 'name': 'transfer', 'outputs': [{'internalType': 'bool', 'name': '', 'type': 'bool'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'#\xb8r\xdd': {'inputs': [{'internalType': 'address', 'name': 'sender', 'type': 'address'}, {'internalType': 'address', 'name': 'recipient', 'type': 'address'}, {'internalType': 'uint256', 'name': 'amount', 'type': 'uint256'}], 'name': 'transferFrom', 'outputs': [{'internalType': 'bool', 'name': '', 'type': 'bool'}], 'stateMutability': 'nonpayable', 'type': 'function'}}
    _bytecode = b'`\xa0`@R4\x80\x15b\x00\x00\x11W`\x00\x80\xfd[P`@Qb\x00\x0b\xf58\x03\x80b\x00\x0b\xf5\x839\x81\x01`@\x81\x90Rb\x00\x004\x91b\x00\x01\xebV[\x82\x82\x82\x82`\x03\x90\x80Q\x90` \x01\x90b\x00\x00O\x92\x91\x90b\x00\x00xV[P\x81Qb\x00\x00e\x90`\x04\x90` \x85\x01\x90b\x00\x00xV[P`\xff\x16`\x80RPb\x00\x02\xad\x93PPPPV[\x82\x80Tb\x00\x00\x86\x90b\x00\x02pV[\x90`\x00R` `\x00 \x90`\x1f\x01` \x90\x04\x81\x01\x92\x82b\x00\x00\xaaW`\x00\x85Ub\x00\x00\xf5V[\x82`\x1f\x10b\x00\x00\xc5W\x80Q`\xff\x19\x16\x83\x80\x01\x17\x85Ub\x00\x00\xf5V[\x82\x80\x01`\x01\x01\x85U\x82\x15b\x00\x00\xf5W\x91\x82\x01[\x82\x81\x11\x15b\x00\x00\xf5W\x82Q\x82U\x91` \x01\x91\x90`\x01\x01\x90b\x00\x00\xd8V[Pb\x00\x01\x03\x92\x91Pb\x00\x01\x07V[P\x90V[[\x80\x82\x11\x15b\x00\x01\x03W`\x00\x81U`\x01\x01b\x00\x01\x08V[cNH{q`\xe0\x1b`\x00R`A`\x04R`$`\x00\xfd[`\x00\x82`\x1f\x83\x01\x12b\x00\x01FW`\x00\x80\xfd[\x81Q`\x01`\x01`@\x1b\x03\x80\x82\x11\x15b\x00\x01cWb\x00\x01cb\x00\x01\x1eV[`@Q`\x1f\x83\x01`\x1f\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x82\x82\x11\x81\x83\x10\x17\x15b\x00\x01\x8eWb\x00\x01\x8eb\x00\x01\x1eV[\x81`@R\x83\x81R` \x92P\x86\x83\x85\x88\x01\x01\x11\x15b\x00\x01\xabW`\x00\x80\xfd[`\x00\x91P[\x83\x82\x10\x15b\x00\x01\xcfW\x85\x82\x01\x83\x01Q\x81\x83\x01\x84\x01R\x90\x82\x01\x90b\x00\x01\xb0V[\x83\x82\x11\x15b\x00\x01\xe1W`\x00\x83\x85\x83\x01\x01R[\x96\x95PPPPPPV[`\x00\x80`\x00``\x84\x86\x03\x12\x15b\x00\x02\x01W`\x00\x80\xfd[\x83Q`\x01`\x01`@\x1b\x03\x80\x82\x11\x15b\x00\x02\x19W`\x00\x80\xfd[b\x00\x02\'\x87\x83\x88\x01b\x00\x014V[\x94P` \x86\x01Q\x91P\x80\x82\x11\x15b\x00\x02>W`\x00\x80\xfd[Pb\x00\x02M\x86\x82\x87\x01b\x00\x014V[\x92PP`@\x84\x01Q`\xff\x81\x16\x81\x14b\x00\x02eW`\x00\x80\xfd[\x80\x91PP\x92P\x92P\x92V[`\x01\x81\x81\x1c\x90\x82\x16\x80b\x00\x02\x85W`\x7f\x82\x16\x91P[` \x82\x10\x81\x14\x15b\x00\x02\xa7WcNH{q`\xe0\x1b`\x00R`"`\x04R`$`\x00\xfd[P\x91\x90PV[`\x80Qa\t,b\x00\x02\xc9`\x009`\x00a\x01D\x01Ra\t,`\x00\xf3\xfe`\x80`@R4\x80\x15a\x00\x10W`\x00\x80\xfd[P`\x046\x10a\x00\xcfW`\x005`\xe0\x1c\x80c@\xc1\x0f\x19\x11a\x00\x8cW\x80c\x9d\xc2\x9f\xac\x11a\x00fW\x80c\x9d\xc2\x9f\xac\x14a\x01\xc8W\x80c\xa4W\xc2\xd7\x14a\x01\xdbW\x80c\xa9\x05\x9c\xbb\x14a\x01\xeeW\x80c\xddb\xed>\x14a\x02\x01W`\x00\x80\xfd[\x80c@\xc1\x0f\x19\x14a\x01\x8bW\x80cp\xa0\x821\x14a\x01\xa0W\x80c\x95\xd8\x9bA\x14a\x01\xc0W`\x00\x80\xfd[\x80c\x06\xfd\xde\x03\x14a\x00\xd4W\x80c\t^\xa7\xb3\x14a\x00\xf2W\x80c\x18\x16\r\xdd\x14a\x01\x15W\x80c#\xb8r\xdd\x14a\x01,W\x80c1<\xe5g\x14a\x01?W\x80c9P\x93Q\x14a\x01xW[`\x00\x80\xfd[a\x00\xdca\x02,V[`@Qa\x00\xe9\x91\x90a\x07JV[`@Q\x80\x91\x03\x90\xf3[a\x01\x05a\x01\x006`\x04a\x07\xbbV[a\x02\xbaV[`@Q\x90\x15\x15\x81R` \x01a\x00\xe9V[a\x01\x1e`\x02T\x81V[`@Q\x90\x81R` \x01a\x00\xe9V[a\x01\x05a\x01:6`\x04a\x07\xe5V[a\x02\xd0V[a\x01f\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x81V[`@Q`\xff\x90\x91\x16\x81R` \x01a\x00\xe9V[a\x01\x05a\x01\x866`\x04a\x07\xbbV[a\x03\'V[a\x01\x9ea\x01\x996`\x04a\x07\xbbV[a\x03^V[\x00[a\x01\x1ea\x01\xae6`\x04a\x08!V[`\x00` \x81\x90R\x90\x81R`@\x90 T\x81V[a\x00\xdca\x03lV[a\x01\x9ea\x01\xd66`\x04a\x07\xbbV[a\x03yV[a\x01\x05a\x01\xe96`\x04a\x07\xbbV[a\x041V[a\x01\x05a\x01\xfc6`\x04a\x07\xbbV[a\x04hV[a\x01\x1ea\x02\x0f6`\x04a\x08CV[`\x01` \x90\x81R`\x00\x92\x83R`@\x80\x84 \x90\x91R\x90\x82R\x90 T\x81V[`\x03\x80Ta\x029\x90a\x08vV[\x80`\x1f\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x02e\x90a\x08vV[\x80\x15a\x02\xb2W\x80`\x1f\x10a\x02\x87Wa\x01\x00\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x02\xb2V[\x82\x01\x91\x90`\x00R` `\x00 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x02\x95W\x82\x90\x03`\x1f\x16\x82\x01\x91[PPPPP\x81V[`\x00a\x02\xc73\x84\x84a\x04uV[P`\x01\x92\x91PPV[`\x01`\x01`\xa0\x1b\x03\x83\x16`\x00\x90\x81R`\x01` \x90\x81R`@\x80\x83 3\x84R\x90\x91R\x81 T`\x00\x19\x81\x14a\x03\x11Wa\x03\x11\x853a\x03\x0c\x86\x85a\x08\xc7V[a\x04uV[a\x03\x1c\x85\x85\x85a\x05\x12V[P`\x01\x94\x93PPPPV[3`\x00\x81\x81R`\x01` \x90\x81R`@\x80\x83 `\x01`\x01`\xa0\x1b\x03\x87\x16\x84R\x90\x91R\x81 T\x90\x91a\x02\xc7\x91\x85\x90a\x03\x0c\x90\x86\x90a\x08\xdeV[a\x03h\x82\x82a\x05\xeeV[PPV[`\x04\x80Ta\x029\x90a\x08vV[`\x01`\x01`\xa0\x1b\x03\x82\x16`\x00\x90\x81R`\x01` \x90\x81R`@\x80\x83 3\x84R\x90\x91R\x90 T\x81\x11\x15a\x03\xf1W`\x01`\x01`\xa0\x1b\x03\x82\x16`\x00\x90\x81R`\x01` \x90\x81R`@\x80\x83 3\x84R\x90\x91R\x90\x81\x90 T\x90Qc\x05Ce\xbb`\xe3\x1b\x81R`\x04\x81\x01\x91\x90\x91R`$\x81\x01\x82\x90R`D\x01`@Q\x80\x91\x03\x90\xfd[`\x01`\x01`\xa0\x1b\x03\x82\x16`\x00\x90\x81R`\x01` \x90\x81R`@\x80\x83 3\x80\x85R\x92R\x90\x91 Ta\x04\'\x91\x84\x91a\x03\x0c\x90\x85\x90a\x08\xc7V[a\x03h\x82\x82a\x06\x9fV[3`\x00\x81\x81R`\x01` \x90\x81R`@\x80\x83 `\x01`\x01`\xa0\x1b\x03\x87\x16\x84R\x90\x91R\x81 T\x90\x91a\x02\xc7\x91\x85\x90a\x03\x0c\x90\x86\x90a\x08\xc7V[`\x00a\x02\xc73\x84\x84a\x05\x12V[`\x01`\x01`\xa0\x1b\x03\x83\x16\x15\x80a\x04\x92WP`\x01`\x01`\xa0\x1b\x03\x82\x16\x15[\x15a\x04\xb0W`@Qc\r\xa3\x0fe`\xe3\x1b\x81R`\x04\x01`@Q\x80\x91\x03\x90\xfd[`\x01`\x01`\xa0\x1b\x03\x83\x81\x16`\x00\x81\x81R`\x01` \x90\x81R`@\x80\x83 \x94\x87\x16\x80\x84R\x94\x82R\x91\x82\x90 \x85\x90U\x90Q\x84\x81R\x7f\x8c[\xe1\xe5\xeb\xec}[\xd1OqB}\x1e\x84\xf3\xdd\x03\x14\xc0\xf7\xb2)\x1e[ \n\xc8\xc7\xc3\xb9%\x91\x01[`@Q\x80\x91\x03\x90\xa3PPPV[`\x01`\x01`\xa0\x1b\x03\x83\x16\x15\x80a\x05/WP`\x01`\x01`\xa0\x1b\x03\x82\x16\x15[\x15a\x05MW`@Qc\r\xa3\x0fe`\xe3\x1b\x81R`\x04\x01`@Q\x80\x91\x03\x90\xfd[`\x01`\x01`\xa0\x1b\x03\x83\x16`\x00\x90\x81R` \x81\x90R`@\x81 \x80T\x83\x92\x90a\x05u\x90\x84\x90a\x08\xc7V[\x90\x91UPP`\x01`\x01`\xa0\x1b\x03\x82\x16`\x00\x90\x81R` \x81\x90R`@\x81 \x80T\x83\x92\x90a\x05\xa2\x90\x84\x90a\x08\xdeV[\x92PP\x81\x90UP\x81`\x01`\x01`\xa0\x1b\x03\x16\x83`\x01`\x01`\xa0\x1b\x03\x16\x7f\xdd\xf2R\xad\x1b\xe2\xc8\x9bi\xc2\xb0h\xfc7\x8d\xaa\x95+\xa7\xf1c\xc4\xa1\x16(\xf5ZM\xf5#\xb3\xef\x83`@Qa\x05\x05\x91\x81R` \x01\x90V[`\x01`\x01`\xa0\x1b\x03\x82\x16a\x06\x15W`@Qc\r\xa3\x0fe`\xe3\x1b\x81R`\x04\x01`@Q\x80\x91\x03\x90\xfd[\x80`\x02`\x00\x82\x82Ta\x06\'\x91\x90a\x08\xdeV[\x90\x91UPP`\x01`\x01`\xa0\x1b\x03\x82\x16`\x00\x90\x81R` \x81\x90R`@\x81 \x80T\x83\x92\x90a\x06T\x90\x84\x90a\x08\xdeV[\x90\x91UPP`@Q\x81\x81R`\x01`\x01`\xa0\x1b\x03\x83\x16\x90`\x00\x90\x7f\xdd\xf2R\xad\x1b\xe2\xc8\x9bi\xc2\xb0h\xfc7\x8d\xaa\x95+\xa7\xf1c\xc4\xa1\x16(\xf5ZM\xf5#\xb3\xef\x90` \x01[`@Q\x80\x91\x03\x90\xa3PPV[`\x01`\x01`\xa0\x1b\x03\x82\x16a\x06\xc6W`@Qc\r\xa3\x0fe`\xe3\x1b\x81R`\x04\x01`@Q\x80\x91\x03\x90\xfd[`\x01`\x01`\xa0\x1b\x03\x82\x16`\x00\x90\x81R` \x81\x90R`@\x81 \x80T\x83\x92\x90a\x06\xee\x90\x84\x90a\x08\xc7V[\x92PP\x81\x90UP\x80`\x02`\x00\x82\x82Ta\x07\x07\x91\x90a\x08\xc7V[\x90\x91UPP`@Q\x81\x81R`\x00\x90`\x01`\x01`\xa0\x1b\x03\x84\x16\x90\x7f\xdd\xf2R\xad\x1b\xe2\xc8\x9bi\xc2\xb0h\xfc7\x8d\xaa\x95+\xa7\xf1c\xc4\xa1\x16(\xf5ZM\xf5#\xb3\xef\x90` \x01a\x06\x93V[`\x00` \x80\x83R\x83Q\x80\x82\x85\x01R`\x00[\x81\x81\x10\x15a\x07wW\x85\x81\x01\x83\x01Q\x85\x82\x01`@\x01R\x82\x01a\x07[V[\x81\x81\x11\x15a\x07\x89W`\x00`@\x83\x87\x01\x01R[P`\x1f\x01`\x1f\x19\x16\x92\x90\x92\x01`@\x01\x93\x92PPPV[\x805`\x01`\x01`\xa0\x1b\x03\x81\x16\x81\x14a\x07\xb6W`\x00\x80\xfd[\x91\x90PV[`\x00\x80`@\x83\x85\x03\x12\x15a\x07\xceW`\x00\x80\xfd[a\x07\xd7\x83a\x07\x9fV[\x94` \x93\x90\x93\x015\x93PPPV[`\x00\x80`\x00``\x84\x86\x03\x12\x15a\x07\xfaW`\x00\x80\xfd[a\x08\x03\x84a\x07\x9fV[\x92Pa\x08\x11` \x85\x01a\x07\x9fV[\x91P`@\x84\x015\x90P\x92P\x92P\x92V[`\x00` \x82\x84\x03\x12\x15a\x083W`\x00\x80\xfd[a\x08<\x82a\x07\x9fV[\x93\x92PPPV[`\x00\x80`@\x83\x85\x03\x12\x15a\x08VW`\x00\x80\xfd[a\x08_\x83a\x07\x9fV[\x91Pa\x08m` \x84\x01a\x07\x9fV[\x90P\x92P\x92\x90PV[`\x01\x81\x81\x1c\x90\x82\x16\x80a\x08\x8aW`\x7f\x82\x16\x91P[` \x82\x10\x81\x14\x15a\x08\xabWcNH{q`\xe0\x1b`\x00R`"`\x04R`$`\x00\xfd[P\x91\x90PV[cNH{q`\xe0\x1b`\x00R`\x11`\x04R`$`\x00\xfd[`\x00\x82\x82\x10\x15a\x08\xd9Wa\x08\xd9a\x08\xb1V[P\x03\x90V[`\x00\x82\x19\x82\x11\x15a\x08\xf1Wa\x08\xf1a\x08\xb1V[P\x01\x90V\xfe\xa2dipfsX"\x12 \xcf\x14\x15\x04v\x939\xf8a\xf6\xce>\x80_\x03\xa5\x88\xb9T#\x07\x97\xe9D\xaaa\xa2\xda\xcf\xd5#\xdddsolcC\x00\x08\t\x003'

    @classmethod
    def deploy(cls, name_: str, symbol_: str, decimals_: uint8, *, from_: Optional[Union[Address, str]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max") -> ERC20MintableBurnable:
        """
        Args:
            name_: string
            symbol_: string
            decimals_: uint8
        """
        return cls._deploy([name_, symbol_, decimals_], from_, value, gas_limit)

    @overload
    def burn(self, account: Address, amount: uint256, *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=False, request_type: RequestType='default') -> None:
        ...

    @overload
    def burn(self, account: Address, amount: uint256, *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=True, request_type: RequestType='default') -> TransactionObject:
        ...

    def burn(self, account: Address, amount: uint256, *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=False, request_type: RequestType='default') -> Union[None, TransactionObject]:
        """
        Args:
            account: address
            amount: uint256
        """
        return self._transact("9dc29fac", [account, amount], return_tx, request_type, type(None), from_, to, value, gas_limit) if not request_type == 'call' else self._call("9dc29fac", [account, amount], return_tx, type(None), from_, to, value, gas_limit)

    @overload
    def mint(self, account: Address, amount: uint256, *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=False, request_type: RequestType='default') -> None:
        ...

    @overload
    def mint(self, account: Address, amount: uint256, *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=True, request_type: RequestType='default') -> TransactionObject:
        ...

    def mint(self, account: Address, amount: uint256, *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=False, request_type: RequestType='default') -> Union[None, TransactionObject]:
        """
        Args:
            account: address
            amount: uint256
        """
        return self._transact("40c10f19", [account, amount], return_tx, request_type, type(None), from_, to, value, gas_limit) if not request_type == 'call' else self._call("40c10f19", [account, amount], return_tx, type(None), from_, to, value, gas_limit)

