from __future__ import annotations

import random 
from dataclasses import dataclass 
from typing import List, NewType, Optional, overload, Union
from typing_extensions import Literal

from woke.testing.contract import Contract, Library, TransactionObject, Address, Wei

from woke.testing.abi_to_type import RequestType
from enum import IntEnum

from pytypes.axelarnetwork.axelargmpsdksolidity.contracts.interfaces.IERC20MintableBurnable import IERC20MintableBurnable
from pytypes.axelarnetwork.axelargmpsdksolidity.contracts.test.ERC20 import ERC20

from woke.testing.primitive_types import uint256
from woke.testing.primitive_types import uint8


class ERC20MintableBurnable(IERC20MintableBurnable, ERC20):
    _abi = {'constructor': {'inputs': [{'internalType': 'string', 'name': 'name_', 'type': 'string'}, {'internalType': 'string', 'name': 'symbol_', 'type': 'string'}, {'internalType': 'uint8', 'name': 'decimals_', 'type': 'uint8'}], 'stateMutability': 'nonpayable', 'type': 'constructor'}, b'*\x1b-\xd8': {'inputs': [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}, {'internalType': 'uint256', 'name': '', 'type': 'uint256'}], 'name': 'InsufficientAllowance', 'type': 'error'}, b'm\x18{(': {'inputs': [], 'name': 'InvalidAccount', 'type': 'error'}, b'\x8c[\xe1\xe5\xeb\xec}[\xd1OqB}\x1e\x84\xf3\xdd\x03\x14\xc0\xf7\xb2)\x1e[ \n\xc8\xc7\xc3\xb9%': {'anonymous': False, 'inputs': [{'indexed': True, 'internalType': 'address', 'name': 'owner', 'type': 'address'}, {'indexed': True, 'internalType': 'address', 'name': 'spender', 'type': 'address'}, {'indexed': False, 'internalType': 'uint256', 'name': 'value', 'type': 'uint256'}], 'name': 'Approval', 'type': 'event'}, b'\xdd\xf2R\xad\x1b\xe2\xc8\x9bi\xc2\xb0h\xfc7\x8d\xaa\x95+\xa7\xf1c\xc4\xa1\x16(\xf5ZM\xf5#\xb3\xef': {'anonymous': False, 'inputs': [{'indexed': True, 'internalType': 'address', 'name': 'from', 'type': 'address'}, {'indexed': True, 'internalType': 'address', 'name': 'to', 'type': 'address'}, {'indexed': False, 'internalType': 'uint256', 'name': 'value', 'type': 'uint256'}], 'name': 'Transfer', 'type': 'event'}, b'\xddb\xed>': {'inputs': [{'internalType': 'address', 'name': '', 'type': 'address'}, {'internalType': 'address', 'name': '', 'type': 'address'}], 'name': 'allowance', 'outputs': [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}], 'stateMutability': 'view', 'type': 'function'}, b'\t^\xa7\xb3': {'inputs': [{'internalType': 'address', 'name': 'spender', 'type': 'address'}, {'internalType': 'uint256', 'name': 'amount', 'type': 'uint256'}], 'name': 'approve', 'outputs': [{'internalType': 'bool', 'name': '', 'type': 'bool'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'p\xa0\x821': {'inputs': [{'internalType': 'address', 'name': '', 'type': 'address'}], 'name': 'balanceOf', 'outputs': [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}], 'stateMutability': 'view', 'type': 'function'}, b'\x9d\xc2\x9f\xac': {'inputs': [{'internalType': 'address', 'name': 'account', 'type': 'address'}, {'internalType': 'uint256', 'name': 'amount', 'type': 'uint256'}], 'name': 'burn', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, b'1<\xe5g': {'inputs': [], 'name': 'decimals', 'outputs': [{'internalType': 'uint8', 'name': '', 'type': 'uint8'}], 'stateMutability': 'view', 'type': 'function'}, b'\xa4W\xc2\xd7': {'inputs': [{'internalType': 'address', 'name': 'spender', 'type': 'address'}, {'internalType': 'uint256', 'name': 'subtractedValue', 'type': 'uint256'}], 'name': 'decreaseAllowance', 'outputs': [{'internalType': 'bool', 'name': '', 'type': 'bool'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'9P\x93Q': {'inputs': [{'internalType': 'address', 'name': 'spender', 'type': 'address'}, {'internalType': 'uint256', 'name': 'addedValue', 'type': 'uint256'}], 'name': 'increaseAllowance', 'outputs': [{'internalType': 'bool', 'name': '', 'type': 'bool'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'@\xc1\x0f\x19': {'inputs': [{'internalType': 'address', 'name': 'account', 'type': 'address'}, {'internalType': 'uint256', 'name': 'amount', 'type': 'uint256'}], 'name': 'mint', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\x06\xfd\xde\x03': {'inputs': [], 'name': 'name', 'outputs': [{'internalType': 'string', 'name': '', 'type': 'string'}], 'stateMutability': 'view', 'type': 'function'}, b'\x95\xd8\x9bA': {'inputs': [], 'name': 'symbol', 'outputs': [{'internalType': 'string', 'name': '', 'type': 'string'}], 'stateMutability': 'view', 'type': 'function'}, b'\x18\x16\r\xdd': {'inputs': [], 'name': 'totalSupply', 'outputs': [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}], 'stateMutability': 'view', 'type': 'function'}, b'\xa9\x05\x9c\xbb': {'inputs': [{'internalType': 'address', 'name': 'recipient', 'type': 'address'}, {'internalType': 'uint256', 'name': 'amount', 'type': 'uint256'}], 'name': 'transfer', 'outputs': [{'internalType': 'bool', 'name': '', 'type': 'bool'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'#\xb8r\xdd': {'inputs': [{'internalType': 'address', 'name': 'sender', 'type': 'address'}, {'internalType': 'address', 'name': 'recipient', 'type': 'address'}, {'internalType': 'uint256', 'name': 'amount', 'type': 'uint256'}], 'name': 'transferFrom', 'outputs': [{'internalType': 'bool', 'name': '', 'type': 'bool'}], 'stateMutability': 'nonpayable', 'type': 'function'}}
    _bytecode = "60a06040523480156200001157600080fd5b5060405162000bf538038062000bf58339810160408190526200003491620001eb565b82828282600390805190602001906200004f92919062000078565b5081516200006590600490602085019062000078565b5060ff1660805250620002ad9350505050565b828054620000869062000270565b90600052602060002090601f016020900481019282620000aa5760008555620000f5565b82601f10620000c557805160ff1916838001178555620000f5565b82800160010185558215620000f5579182015b82811115620000f5578251825591602001919060010190620000d8565b506200010392915062000107565b5090565b5b8082111562000103576000815560010162000108565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200014657600080fd5b81516001600160401b03808211156200016357620001636200011e565b604051601f8301601f19908116603f011681019082821181831017156200018e576200018e6200011e565b81604052838152602092508683858801011115620001ab57600080fd5b600091505b83821015620001cf5785820183015181830184015290820190620001b0565b83821115620001e15760008385830101525b9695505050505050565b6000806000606084860312156200020157600080fd5b83516001600160401b03808211156200021957600080fd5b620002278783880162000134565b945060208601519150808211156200023e57600080fd5b506200024d8682870162000134565b925050604084015160ff811681146200026557600080fd5b809150509250925092565b600181811c908216806200028557607f821691505b60208210811415620002a757634e487b7160e01b600052602260045260246000fd5b50919050565b60805161092c620002c96000396000610144015261092c6000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac146101c8578063a457c2d7146101db578063a9059cbb146101ee578063dd62ed3e1461020157600080fd5b806340c10f191461018b57806370a08231146101a057806395d89b41146101c057600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011557806323b872dd1461012c578063313ce5671461013f5780633950935114610178575b600080fd5b6100dc61022c565b6040516100e9919061074a565b60405180910390f35b6101056101003660046107bb565b6102ba565b60405190151581526020016100e9565b61011e60025481565b6040519081526020016100e9565b61010561013a3660046107e5565b6102d0565b6101667f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020016100e9565b6101056101863660046107bb565b610327565b61019e6101993660046107bb565b61035e565b005b61011e6101ae366004610821565b60006020819052908152604090205481565b6100dc61036c565b61019e6101d63660046107bb565b610379565b6101056101e93660046107bb565b610431565b6101056101fc3660046107bb565b610468565b61011e61020f366004610843565b600160209081526000928352604080842090915290825290205481565b6003805461023990610876565b80601f016020809104026020016040519081016040528092919081815260200182805461026590610876565b80156102b25780601f10610287576101008083540402835291602001916102b2565b820191906000526020600020905b81548152906001019060200180831161029557829003601f168201915b505050505081565b60006102c7338484610475565b50600192915050565b6001600160a01b0383166000908152600160209081526040808320338452909152812054600019811461031157610311853361030c86856108c7565b610475565b61031c858585610512565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102c791859061030c9086906108de565b61036882826105ee565b5050565b6004805461023990610876565b6001600160a01b03821660009081526001602090815260408083203384529091529020548111156103f1576001600160a01b03821660009081526001602090815260408083203384529091529081902054905163054365bb60e31b815260048101919091526024810182905260440160405180910390fd5b6001600160a01b03821660009081526001602090815260408083203380855292529091205461042791849161030c9085906108c7565b610368828261069f565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102c791859061030c9086906108c7565b60006102c7338484610512565b6001600160a01b038316158061049257506001600160a01b038216155b156104b057604051630da30f6560e31b815260040160405180910390fd5b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316158061052f57506001600160a01b038216155b1561054d57604051630da30f6560e31b815260040160405180910390fd5b6001600160a01b038316600090815260208190526040812080548392906105759084906108c7565b90915550506001600160a01b038216600090815260208190526040812080548392906105a29084906108de565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161050591815260200190565b6001600160a01b03821661061557604051630da30f6560e31b815260040160405180910390fd5b806002600082825461062791906108de565b90915550506001600160a01b038216600090815260208190526040812080548392906106549084906108de565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b6001600160a01b0382166106c657604051630da30f6560e31b815260040160405180910390fd5b6001600160a01b038216600090815260208190526040812080548392906106ee9084906108c7565b92505081905550806002600082825461070791906108c7565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610693565b600060208083528351808285015260005b818110156107775785810183015185820160400152820161075b565b81811115610789576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146107b657600080fd5b919050565b600080604083850312156107ce57600080fd5b6107d78361079f565b946020939093013593505050565b6000806000606084860312156107fa57600080fd5b6108038461079f565b92506108116020850161079f565b9150604084013590509250925092565b60006020828403121561083357600080fd5b61083c8261079f565b9392505050565b6000806040838503121561085657600080fd5b61085f8361079f565b915061086d6020840161079f565b90509250929050565b600181811c9082168061088a57607f821691505b602082108114156108ab57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156108d9576108d96108b1565b500390565b600082198211156108f1576108f16108b1565b50019056fea2646970667358221220cf141504769339f861f6ce3e805f03a588b954230797e944aa61a2dacfd523dd64736f6c63430008090033"

    @classmethod
    def deploy(cls, name_: str, symbol_: str, decimals_: uint8, *, from_: Optional[Union[Address, str]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max") -> ERC20MintableBurnable:
        """
        Args:
            name_: string
            symbol_: string
            decimals_: uint8
        """
        return cls._deploy([name_, symbol_, decimals_], from_, value, gas_limit, {})

    @overload
    def burn(self, account: Address, amount: uint256, *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=False, request_type: RequestType='default') -> None:
        ...

    @overload
    def burn(self, account: Address, amount: uint256, *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=True, request_type: RequestType='default') -> TransactionObject:
        ...

    def burn(self, account: Address, amount: uint256, *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=False, request_type: RequestType='default') -> Union[None, TransactionObject]:
        """
        Args:
            account: address
            amount: uint256
        """
        return self._transact("9dc29fac", [account, amount], return_tx, request_type, type(None), from_, to, value, gas_limit) if not request_type == 'call' else self._call("9dc29fac", [account, amount], return_tx, type(None), from_, to, value, gas_limit)

    @overload
    def mint(self, account: Address, amount: uint256, *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=False, request_type: RequestType='default') -> None:
        ...

    @overload
    def mint(self, account: Address, amount: uint256, *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=True, request_type: RequestType='default') -> TransactionObject:
        ...

    def mint(self, account: Address, amount: uint256, *, from_: Optional[Union[Address, str]] = None, to: Optional[Union[Address, str, Contract]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool=False, request_type: RequestType='default') -> Union[None, TransactionObject]:
        """
        Args:
            account: address
            amount: uint256
        """
        return self._transact("40c10f19", [account, amount], return_tx, request_type, type(None), from_, to, value, gas_limit) if not request_type == 'call' else self._call("40c10f19", [account, amount], return_tx, type(None), from_, to, value, gas_limit)

